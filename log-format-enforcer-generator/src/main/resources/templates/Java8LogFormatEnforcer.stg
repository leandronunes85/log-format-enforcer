logFormatEnforcer(package,
                    expandedFieldInfos,
                    entrySeparator,
                    valueDelimiterPrefix,
                    valueDelimiterSuffix,
                    keyValueSeparator,
                    builderEntryPoint) ::= <<
package <package>;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.event.Level;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.function.BiConsumer;
import java.util.function.BooleanSupplier;
import java.util.function.Supplier;

import static java.util.stream.Collectors.joining;

public class LogFormatEnforcer {

    public static LogFormatEnforcer loggerFor(Class\<?\> clazz) {
        return new LogFormatEnforcer(clazz.getName());
    }

    private final HashMap\<Level, BooleanSupplier\> logEnabledLookup = new HashMap\<\>(Level.values().length);
    private final HashMap\<Level, BiConsumer\<String, Object[]\>\> logLookup = new HashMap\<\>(Level.values().length);

    private LogFormatEnforcer(String logName) {
        Logger logger = LoggerFactory.getLogger(logName);

        this.logEnabledLookup.put(Level.ERROR, logger::isErrorEnabled);
        this.logEnabledLookup.put(Level.WARN, logger::isWarnEnabled);
        this.logEnabledLookup.put(Level.INFO, logger::isInfoEnabled);
        this.logEnabledLookup.put(Level.DEBUG, logger::isDebugEnabled);
        this.logEnabledLookup.put(Level.TRACE, logger::isTraceEnabled);

        this.logLookup.put(Level.ERROR, logger::error);
        this.logLookup.put(Level.WARN, logger::warn);
        this.logLookup.put(Level.INFO, logger::info);
        this.logLookup.put(Level.DEBUG, logger::debug);
        this.logLookup.put(Level.TRACE, logger::trace);
    }

    public void error(MessageBuilder messageBuilder) {
        log(Level.ERROR, messageBuilder);
    }

    public void warn(MessageBuilder messageBuilder) {
        log(Level.WARN, messageBuilder);
    }

    public void info(MessageBuilder messageBuilder) {
        log(Level.INFO, messageBuilder);
    }

    public void debug(MessageBuilder messageBuilder) {
        log(Level.DEBUG, messageBuilder);
    }

    public void trace(MessageBuilder messageBuilder) {
        log(Level.TRACE, messageBuilder);
    }

    private void log(Level level, MessageBuilder messageBuilder) {
        if (this.logEnabledLookup.get(level).getAsBoolean()) {
            ActualBuilder builder = new ActualBuilder();
            messageBuilder.build(builder);
            this.logLookup.get(level).accept(builder.getMessage(), builder.getArguments());
        }
    }

    public interface MessageBuilder {
        NoMoreFields build(<builderEntryPoint> builder);
    }

    <expandedFieldInfos:interface(); separator="\n\n">

    public interface MoreFields extends NoMoreFields {
        MoreFields and(String name, Object value);

        default MoreFields and(String name, Supplier\<Object\> valueSupplier) {
            return and(name, valueSupplier.get());
        }

        NoMoreFields exception(Throwable value);
    }

    public interface NoMoreFields {
    }

    private static class ActualBuilder implements <expandedFieldInfos:{o | <o.interfaceName>}; separator=", "><if(expandedFieldInfos)>, <endif>MoreFields, NoMoreFields {

        private final ArrayList\<String\> messages = new ArrayList\<\>();
        private final ArrayList\<Object\> values = new ArrayList\<\>();

        <expandedFieldInfos:actualBuilderMethod();separator="\n\n">

        public MoreFields and(String name, Object value) {
            return newField(name, value);
        }

        public NoMoreFields exception(Throwable value) {
            this.values.add(value);
            return this;
        }

        private ActualBuilder newField(String name, Object value) {
            this.messages.add(name + "<keyValueSeparator><valueDelimiterPrefix>{}<valueDelimiterSuffix>");
            this.values.add(value);
            return this;
        }

        public String getMessage() {
            return messages.stream().collect(joining("<entrySeparator>"));
        }

        public Object[] getArguments() {
            return values.toArray();
        }
    }
}

>>

interface(expandedFieldInfo) ::= <<
public interface <expandedFieldInfo.interfaceName> <if(expandedFieldInfo.optional)>extends <expandedFieldInfo.returnType> <endif>{
    <expandedFieldInfo.returnType> <expandedFieldInfo.fieldName>(Object value);
}
>>

actualBuilderMethod(expandedFieldInfo) ::= <<
public <expandedFieldInfo.returnType> <expandedFieldInfo.fieldName>(Object <expandedFieldInfo.fieldName>) {
    return newField("<expandedFieldInfo.fieldText>", <expandedFieldInfo.fieldName>);
}
>>
